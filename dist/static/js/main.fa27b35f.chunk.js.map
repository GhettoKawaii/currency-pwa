{"version":3,"sources":["redux/actionTypes.js","redux/actions/getCurrencies.js","components/Preloader.jsx","App.js","serviceWorker.js","redux/reducers/getCoinsReducer.js","redux/reducers/index.js","redux/sagas/getCoinsSaga.js","redux/sagas/index.js","redux/configureStore.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","GET_COINS_TRIGGERED","GET_COINS_REQUEST","GET_COINS_SUCCESS","GET_COINS_FAILURE","getCoinsTriggered","getCoinsRequest","getCoinsSuccess","getCoinsFailure","_actionTypes__WEBPACK_IMPORTED_MODULE_0__","type","data","payload","error","Preloader","react_default","a","createElement","HomePage","React","lazy","Promise","all","e","then","bind","App","react","fallback","react_router_dom","react_router","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","initialState","isLoading","getCurrenciesReducer","arguments","length","undefined","action","Object","objectSpread","rootReducer","combineReducers","getCoins","getCoinsReducer","getCoinsSaga","response","regenerator_default","wrap","_context","prev","next","put","request","call","axios","get","sent","success","t0","failure","stop","_marked","_context2","takeLatest","_marked2","rootSaga","sagas_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa27b35f.chunk.js","sourcesContent":["export const GET_COINS_TRIGGERED = \"GET_COINS_TRIGGERED\";\r\nexport const GET_COINS_REQUEST = \"GET_COINS_REQUEST\";\r\nexport const GET_COINS_SUCCESS = \"GET_COINS_SUCCESS\";\r\nexport const GET_COINS_FAILURE = \"GET_COINS_FAILURE\";\r\n","import {\r\n  GET_COINS_TRIGGERED,\r\n  GET_COINS_REQUEST,\r\n  GET_COINS_SUCCESS,\r\n  GET_COINS_FAILURE\r\n} from \"../actionTypes\";\r\n\r\nexport const getCoinsTriggered = () => ({\r\n  type: GET_COINS_TRIGGERED\r\n});\r\n\r\nexport const getCoinsRequest = () => ({\r\n  type: GET_COINS_REQUEST\r\n});\r\n\r\nexport const getCoinsSuccess = data => ({\r\n  type: GET_COINS_SUCCESS,\r\n  payload: { data }\r\n});\r\n\r\nexport const getCoinsFailure = error => ({\r\n  type: GET_COINS_FAILURE,\r\n  payload: { error }\r\n});\r\n","import React from \"react\";\r\n\r\nexport default function Preloader() {\r\n  return (\r\n    <div>\r\n      <h1>Запускаем</h1>\r\n      <p>░ГУСЯ░▄▀▀▀▄░РАБОТЯГИ░░ </p>\r\n      <p>▄███▀░◐░░░▌░░░░░░░ </p>\r\n      <p>░░░░▌░░░░░▐░░░░░░░ </p>\r\n      <p>░░░░▐░░░░░▐░░░░░░░ </p>\r\n      <p>░░░░▌░░░░░▐▄▄░░░░░ </p>\r\n      <p>░░░░▌░░░░▄▀▒▒▀▀▀▀▄ </p>\r\n      <p>░░░▐░░░░▐▒▒▒▒▒▒▒▒▀▀▄</p>\r\n      <p>░░░▐░░░░▐▄▒▒▒▒▒▒▒▒▒▒▀▄</p>\r\n      <p>░░░░▀▄░░░░▀▄▒▒▒▒▒▒▒▒▒▒▀▄</p>\r\n      <p>░░░░░░▀▄▄▄▄▄█▄▄▄▄▄▄▄▄▄▄▄▀▄ </p>\r\n      <p>░░░░░░░░░░░▌▌░▌▌░░░░░ </p>\r\n      <p>░░░░░░░░░░░▌▌░▌▌░░░░░ </p>\r\n      <p>░░░░░░░░░▄▄▌▌▄▌▌░░░░░ </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"./App.scss\";\r\nimport Preloader from \"./components//Preloader\";\r\n// import HomePage from \"./pages/HomePage\";\r\nconst HomePage = React.lazy(() => import(\"./pages/HomePage\"));\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={<Preloader />}>\r\n      <Router>\r\n        <Route path=\"/\" exact component={HomePage} />\r\n      </Router>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  GET_COINS_REQUEST,\r\n  GET_COINS_SUCCESS,\r\n  GET_COINS_FAILURE\r\n} from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  data: {},\r\n  error: null,\r\n  isLoading: true\r\n};\r\n\r\nconst getCurrenciesReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_COINS_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case GET_COINS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.payload.data,\r\n        error: null\r\n      };\r\n    case GET_COINS_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.error\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default getCurrenciesReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport getCoinsReducer from \"./getCoinsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  getCoins: getCoinsReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import { put, takeLatest, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport { GET_COINS_TRIGGERED } from \"../actionTypes\";\r\nimport {\r\n  getCoinsRequest as request,\r\n  getCoinsSuccess as success,\r\n  getCoinsFailure as failure\r\n} from \"../actions/getCurrencies\";\r\n\r\nfunction* getCoins(action) {\r\n  yield put(request());\r\n  try {\r\n    let response = yield call(\r\n      [axios, axios.get],\r\n      \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,XRP&tsyms=USD,UAH,RUB&api_key={51a525e101f07b11947573a072d5a1ccf157d7b6cad4d1b2d2630e6acb1c8f29}\"\r\n    );\r\n    yield put(success(response.data));\r\n  } catch (err) {\r\n    console.log(err);\r\n    yield put(failure(err.response));\r\n  }\r\n}\r\n\r\nexport default function* getCoinsSaga() {\r\n  yield takeLatest(GET_COINS_TRIGGERED, getCoins);\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\nimport getCoinsSaga from \"./getCoinsSaga\";\r\nexport default function* rootSaga() {\r\n  yield all([getCoinsSaga()]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport rootReducer from \"../redux/reducers\";\r\nimport rootSaga from \"../redux/sagas\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"./redux/configureStore\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}